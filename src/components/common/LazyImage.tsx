import React, { useState, useRef, useEffect } from 'react';\n\ninterface LazyImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  src: string;\n  alt: string;\n  fallback?: string;\n  placeholder?: string;\n  threshold?: number;\n  className?: string;\n}\n\n/**\n * Lazy loading image component with intersection observer\n * Improves performance by only loading images when they're visible\n */\nexport default function LazyImage({\n  src,\n  alt,\n  fallback = '/placeholder-image.png',\n  placeholder,\n  threshold = 0.1,\n  className = '',\n  ...props\n}: LazyImageProps) {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(false);\n  const [inView, setInView] = useState(false);\n  const imgRef = useRef<HTMLImageElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setInView(true);\n          observer.disconnect();\n        }\n      },\n      { threshold }\n    );\n\n    if (imgRef.current) {\n      observer.observe(imgRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [threshold]);\n\n  const handleLoad = () => {\n    setLoaded(true);\n  };\n\n  const handleError = () => {\n    setError(true);\n    setLoaded(true);\n  };\n\n  const imageSrc = error ? fallback : src;\n  const shouldLoad = inView || loaded;\n\n  return (\n    <div className={`lazy-image ${className}`}>\n      {/* Placeholder while loading */}\n      {!loaded && placeholder && (\n        <div className=\"lazy-image__placeholder\">\n          <img src={placeholder} alt=\"\" aria-hidden=\"true\" />\n        </div>\n      )}\n      \n      {/* Main image */}\n      <img\n        ref={imgRef}\n        src={shouldLoad ? imageSrc : undefined}\n        alt={alt}\n        onLoad={handleLoad}\n        onError={handleError}\n        className={`lazy-image__img ${\n          loaded ? 'lazy-image__img--loaded' : 'lazy-image__img--loading'\n        }`}\n        loading=\"lazy\"\n        decoding=\"async\"\n        {...props}\n      />\n    </div>\n  );\n}